AWSTemplateFormatVersion: 2010-09-09
Description: "JAWS-UG Container #6 - Demo (common resources)"
Parameters:
  Location: 
    Description: Lockdown ALL access to EC2 instances (default can be accessed from anywhere)
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid CIDR range of the form x.x.x.x/x."
Mappings: 
  SubnetConfig: 
    VPC: 
      CIDR: 10.0.0.0/16
    Public1a: 
      CIDR: 10.0.10.0/24
    Public1c: 
      CIDR: 10.0.20.0/24
Resources:
  RepositoryWeb:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: demo/web
  RepositoryAPI:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: demo/api
  RepositoryAuth:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: demo/auth
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 
        Fn::FindInMap: 
          - SubnetConfig
          - VPC
          - CIDR
      Tags: 
        - Key: Application
          Value: 
            Ref: AWS::StackName
        - Key: Network
          Value: Public
  PublicSubnet1a: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: 
        Ref: VPC
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 
        Fn::FindInMap: 
          - SubnetConfig
          - Public1a
          - CIDR
      Tags: 
        - Key: Application
          Value: 
            Ref: AWS::StackName
        - Key: Network
          Value: Public
  PublicSubnet1c: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: 
        Ref: VPC
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 
        Fn::FindInMap: 
          - SubnetConfig
          - Public1c
          - CIDR
      Tags: 
        - Key: Application
          Value: 
            Ref: AWS::StackName
        - Key: Network
          Value: Public
  InternetGateway: 
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Application
          Value: 
            Ref: AWS::StackName
        - Key: Network
          Value: Public
  GatewayToInternet: 
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: 
        Ref: VPC
      InternetGatewayId: 
        Ref: InternetGateway
  PublicRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: 
        Ref: VPC
      Tags: 
        - Key: Application
          Value: 
            Ref: AWS::StackName
        - Key: Network
          Value: Public
  PublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties: 
      RouteTableId: 
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
        Ref: InternetGateway
  PublicSubnet1aRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: 
        Ref: PublicSubnet1a
      RouteTableId: 
        Ref: PublicRouteTable
  PublicSubnet1cRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: 
        Ref: PublicSubnet1c
      RouteTableId: 
        Ref: PublicRouteTable
  PublicNetworkAcl: 
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: 
        Ref: VPC
      Tags: 
        - Key: Application
          Value: 
            Ref: AWS::StackName
        - Key: Network
          Value: Public
  InboundHTTPPublicNetworkAclEntry: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: 
        Ref: PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: 80
        To: 80
  InboundHTTPSPublicNetworkAclEntry: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: 
        Ref: PublicNetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: 443
        To: 443
  InboundSSHPublicNetworkAclEntry: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: 
        Ref: PublicNetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 
        Ref: Location
      PortRange: 
        From: 22
        To: 22
  InboundEphemeralPublicNetworkAclEntry: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: 
        Ref: PublicNetworkAcl
      RuleNumber: 103
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: 1024
        To: 65535
  OutboundPublicNetworkAclEntry: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      NetworkAclId: 
        Ref: PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: 0
        To: 65535
  PublicSubnet1aNetworkAclAssociation: 
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      SubnetId: 
        Ref: PublicSubnet1a
      NetworkAclId: 
        Ref: PublicNetworkAcl
  PublicSubnet1cNetworkAclAssociation: 
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      SubnetId: 
        Ref: PublicSubnet1c
      NetworkAclId: 
        Ref: PublicNetworkAcl
  SecurityGroupEC2: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable access to the EC2 instances
      VpcId: 
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 
            Ref: Location 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp:
            Fn::FindInMap: 
              - SubnetConfig
              - VPC
              - CIDR
  SecurityGroupELB: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable access to the ELB
      VpcId: 
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 
            Ref: Location
Outputs:
  VPC: 
    Description: VPCId of the newly created VPC
    Value: 
      Ref: VPC
    Export:
      Name: DemoVPC
  PublicSubnet1a:
    Description: SubnetId of the public subnet 1a
    Value: 
      Ref: PublicSubnet1a
    Export:
      Name: DemoPublicSubnet1a
  PublicSubnet1c:
    Description: SubnetId of the public subnet 1c
    Value: 
      Ref: PublicSubnet1c
    Export:
      Name: DemoPublicSubnet1c
  SecurityGroupEC2: 
    Description: SecurityGroup for EC2 instances
    Value: 
      Ref: SecurityGroupEC2
    Export:
      Name: DemoSecurityGroupEC2
  SecurityGroupELB: 
    Description: SecurityGroup for ELB
    Value: 
      Ref: SecurityGroupELB
    Export:
      Name: DemoSecurityGroupELB
